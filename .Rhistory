theme(axis.text.y=element_blank(),
axis.title.y=element_blank())
amount_sm2 <- ggplot(df_regression, aes(x = sm2, y = log_amount, fill = sm2))+
geom_boxplot() +
theme_minimal() +
theme(legend.position = "bottom")+
scale_fill_brewer(palette="BuPu") +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank())
amount_sm3 <- ggplot(df_regression, aes(x = sm3, y = log_amount, fill = sm3))+
geom_boxplot() +
theme_minimal() +
theme(legend.position = "bottom")+
scale_fill_brewer(palette="BuPu") +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank())
amount_sm4 <- ggplot(df_regression, aes(x = sm4, y = log_amount, fill = sm4))+
geom_boxplot() +
theme_minimal() +
theme(legend.position = "bottom")+
scale_fill_brewer(palette="BuPu") +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank())
amount_sm5 <- ggplot(df_regression, aes(x = sm5, y = log_amount, fill = sm5))+
geom_boxplot() +
theme_minimal() +
theme(legend.position = "bottom")+
scale_fill_brewer(palette="BuPu") +
theme(axis.text.y=element_blank(),
axis.title.y=element_blank())
grid.arrange(amount_mh1, amount_mh6, amount_sm1, amount_sm2, amount_sm3,
amount_sm4, amount_sm5, nrow = 1)
summary(model1)
par(mfrow = c(1,1))
plot(model_summary$bic)
View(df_clinical)
View(df_master)
prop.table(table(df_master$resident_status))
# boxplot for race versus amount, grouped by resident status
ggplot(df_regression, aes(x = race, y = log_amount, fill = resident_status))+
geom_boxplot() +
facet_grid(gender ~ .) +
theme_minimal() +
theme(legend.position = "bottom")
grid.arrange(amount_bmi, amount_age, nrow = 1)
# Load packages
library(dplyr)
library(ggplot2)
library(eeptools) # convert date of birth into age
library(gridExtra) # combine several graphs
library(corrplot) # correlation plot
library(leaps) # regsubsets() for regression
library(ggExtra) # plot histogram margin on scatterplot
# Load four csv files into dataframes
df_demographics <- read.csv(file = 'demographics.csv')
df_clinical <- read.csv(file = 'clinical_data.csv')
df_billid <- read.csv(file = 'bill_id.csv')
df_billamount <- read.csv(file = 'bill_amount.csv')
?mcar
??mcar
?mcar_test
??mcar_test
mcar_test(df_clinical)
install.packages("naniar")
library(naniar)
mcar_test(df_clinical)
df_clinical_naomit <- na.omit(df_clinical)
View(df_clinical_naomit)
View(df_billid)
View(df_billamount)
View(df_bill)
df_master_naomit <- na.omit(df_master)
remove(df_master_naomit)
df_clinical_naomit <- df_clinical_naomit %>%
mutate(medical_history_3 = recode(medical_history_3,
'Yes'= '1',
'No'= '0'))
clinical_naomit_col = seq(4,21,1) # convert 4th to 21st columns to factor
df_clinical_naomit[,x] <- factor(df_clinical_naomit[,x], exclude = NULL)
for (x in clinical_col) {
df_clinical[,x] <- factor(df_clinical[,x], exclude = NULL)
}
df_clinical_naomit[,x] <- factor(df_clinical_naomit[,x], exclude = NULL)
# Create a new column for length of stay (LOS) and code in numeric format
df_clinical_naomit <- df_clinical_naomit %>%
mutate(date_of_admission = as.Date(date_of_admission),
date_of_discharge = as.Date(date_of_discharge),
LOS = date_of_discharge - date_of_admission)
df_clinical_naomit$LOS <- as.numeric(df_clinical_naomit$LOS)
df_clinical_naomit <- rename(df_clinical_naomit, 'patient_id' = 'id')
df_master_naomit <- merge(df_bill, df_clinical_naomit, by=c('patient_id', 'date_of_admission'))
df_master_naomit <- df_master_naomit %>%
arrange(patient_id, date_of_admission) %>%
group_by(patient_id) %>%
mutate(daysSinceLast = as.integer(date_of_admission - lag(date_of_discharge))) %>%
ungroup() %>%
mutate(readmitted_status = if_else(daysSinceLast >=0, 1, 0)) %>%
mutate(bmi = weight/(height*height)*10000)
df_master_naomit$readmitted_status[is.na(df_master_naomit$readmitted_status)] <- 0
df_master_naomit$readmitted_status <- factor(df_master_naomit$readmitted_status)
df_master_naomit <- merge(df_master_naomit, df_demographics, by = 'patient_id')
df_master_naomit <- df_master_naomit[-c(35,29)] # delete unused columns: date_of_birth & daysSinceLast
df_master_naomit <- df_master_naomit %>%
relocate(date_of_discharge, .before = amount) %>%
relocate(readmitted_status, gender, race, resident_status,
.before = medical_history_1)
View(df_master)
View(df_master_naomit)
View(df_clinical)
View(df_master)
View(df_demographics)
df_demographics$age <- round(age_calc(df_demographics$date_of_birth, units = 'years'))
View(df_demographics)
# Load four csv files into dataframes
df_demographics <- read.csv(file = 'demographics.csv')
# Re-organize the characters for gender, race and resident_status
df_demographics <- df_demographics %>%
mutate(gender = recode(gender, 'f' = 'Female', 'm' = 'Male'),
race = recode(race, 'chinese' = 'Chinese', 'India' = 'Indian'),
resident_status = recode(resident_status, 'Singapore citizen' = 'Singaporean'))
# Code gender, race, resident_status as factors
demo_col = seq(2,4,1)
for (y in demo_col) {
df_demographics[,y] <- factor(df_demographics[,y], exclude = NULL)
}
# Check any incorrect spelling/wrong factor types
sapply(df_demographics, levels)
# Convert date of birth into ages using today's date
df_demographics <- df_demographics %>%
mutate(date_of_birth = as.Date(date_of_birth))
df_demographics$age <- round(age_calc(df_demographics$date_of_birth, units = 'years'))
View(df_demographics)
df_master_naomit <- df_master_naomit %>%
arrange(patient_id, date_of_admission) %>%
group_by(patient_id) %>%
mutate(daysSinceLast = as.integer(date_of_admission - lag(date_of_discharge))) %>%
ungroup() %>%
mutate(readmitted_status = if_else(daysSinceLast >=0, 1, 0)) %>%
mutate(bmi = weight/(height*height)*10000)
df_master_naomit$readmitted_status[is.na(df_master_naomit$readmitted_status)] <- 0
df_master_naomit$readmitted_status <- factor(df_master_naomit$readmitted_status)
df_master_naomit <- merge(df_master_naomit, df_demographics, by = 'patient_id')
df_master_naomit <- df_master_naomit[-c(35,29)] # delete unused columns: date_of_birth & daysSinceLast
df_master_naomit <- df_master_naomit %>%
relocate(date_of_discharge, .before = amount) %>%
relocate(readmitted_status, gender, race, resident_status,
.before = medical_history_1)
# Load four csv files into dataframes
df_demographics <- read.csv(file = 'demographics.csv')
df_clinical <- read.csv(file = 'clinical_data.csv')
df_billid <- read.csv(file = 'bill_id.csv')
df_billamount <- read.csv(file = 'bill_amount.csv')
df_clinical_naomit <- na.omit(df_clinical) # remove NA values and use df_clinical_naomit for sensitivity analysis
# Medical_history_3 coded in 0/1/yes/no, need to convert yes/no into 1/0
df_clinical <- df_clinical %>%
mutate(medical_history_3 = recode(medical_history_3,
'Yes'= '1',
'No'= '0'))
df_clinical_naomit <- df_clinical_naomit %>%
mutate(medical_history_3 = recode(medical_history_3,
'Yes'= '1',
'No'= '0'))
# Code medical histories, preop_medications and symptoms as factor of 0/1
clinical_col = seq(4,21,1) # convert 4th to 21st columns to factor
for (x in clinical_col) {
df_clinical[,x] <- factor(df_clinical[,x], exclude = NULL)
}
# Create a new column for length of stay (LOS) and code in numeric format
df_clinical <- df_clinical %>%
mutate(date_of_admission = as.Date(date_of_admission),
date_of_discharge = as.Date(date_of_discharge),
LOS = date_of_discharge - date_of_admission)
df_clinical$LOS <- as.numeric(df_clinical$LOS)
clinical_naomit_col = seq(4,21,1) # convert 4th to 21st columns to factor
for (x in clinical_naomit_col) {
df_clinical_naomit[,x] <- factor(df_clinical_naomit[,x], exclude = NULL)
}
# Create a new column for length of stay (LOS) and code in numeric format
df_clinical_naomit <- df_clinical_naomit %>%
mutate(date_of_admission = as.Date(date_of_admission),
date_of_discharge = as.Date(date_of_discharge),
LOS = date_of_discharge - date_of_admission)
df_clinical_naomit$LOS <- as.numeric(df_clinical_naomit$LOS)
# Re-organize the characters for gender, race and resident_status
df_demographics <- df_demographics %>%
mutate(gender = recode(gender, 'f' = 'Female', 'm' = 'Male'),
race = recode(race, 'chinese' = 'Chinese', 'India' = 'Indian'),
resident_status = recode(resident_status, 'Singapore citizen' = 'Singaporean'))
# Code gender, race, resident_status as factors
demo_col = seq(2,4,1)
for (y in demo_col) {
df_demographics[,y] <- factor(df_demographics[,y], exclude = NULL)
}
# Check any incorrect spelling/wrong factor types
sapply(df_demographics, levels)
# Convert date of birth into ages using today's date
df_demographics <- df_demographics %>%
mutate(date_of_birth = as.Date(date_of_birth))
df_demographics$age <- round(age_calc(df_demographics$date_of_birth, units = 'years'))
# Join bill id with bill amount
df_bill <- merge(df_billid, df_billamount, by = 'bill_id')
df_bill <- summarize(group_by(df_bill, patient_id, date_of_admission),
sum(amount),.groups = NULL) %>%
rename('amount'= 'sum(amount)')
df_bill <- df_bill %>%
mutate(date_of_admission = as.Date(date_of_admission))
# Merge clinical data with bill data
df_clinical <- rename(df_clinical, 'patient_id' = 'id')
df_master <- merge(df_bill, df_clinical, by=c('patient_id', 'date_of_admission'))
df_clinical_naomit <- rename(df_clinical_naomit, 'patient_id' = 'id')
df_master_naomit <- merge(df_bill, df_clinical_naomit, by=c('patient_id', 'date_of_admission'))
# Create new column for re-admission status and bmi
df_master <- df_master %>%
arrange(patient_id, date_of_admission) %>%
group_by(patient_id) %>%
mutate(daysSinceLast = as.integer(date_of_admission - lag(date_of_discharge))) %>%
ungroup() %>%
mutate(readmitted_status = if_else(daysSinceLast >=0, 1, 0)) %>%
mutate(bmi = weight/(height*height)*10000)
df_master$readmitted_status[is.na(df_master$readmitted_status)] <- 0
df_master$readmitted_status <- factor(df_master$readmitted_status)
df_master_naomit <- df_master_naomit %>%
arrange(patient_id, date_of_admission) %>%
group_by(patient_id) %>%
mutate(daysSinceLast = as.integer(date_of_admission - lag(date_of_discharge))) %>%
ungroup() %>%
mutate(readmitted_status = if_else(daysSinceLast >=0, 1, 0)) %>%
mutate(bmi = weight/(height*height)*10000)
df_master_naomit$readmitted_status[is.na(df_master_naomit$readmitted_status)] <- 0
df_master_naomit$readmitted_status <- factor(df_master_naomit$readmitted_status)
# Merge data from demographics.csv
df_master <- merge(df_master, df_demographics, by = 'patient_id')
df_master <- df_master[-c(35,29)] # delete unused columns: date_of_birth & daysSinceLast
df_master_naomit <- merge(df_master_naomit, df_demographics, by = 'patient_id')
df_master_naomit <- df_master_naomit[-c(35,29)] # delete unused columns: date_of_birth & daysSinceLast
# Move categorical variables to the front and continuous/discrete variables to the back
df_master <- df_master %>%
relocate(date_of_discharge, .before = amount) %>%
relocate(readmitted_status, gender, race, resident_status,
.before = medical_history_1)
df_master_naomit <- df_master_naomit %>%
relocate(date_of_discharge, .before = amount) %>%
relocate(readmitted_status, gender, race, resident_status,
.before = medical_history_1)
df_regression_naomit <- df_master_naomit %>%
mutate(amount = log(amount))
df_regression <- df_regression[, -c(1,2,3,30,31)] # remove patient id, date of admission, discharge, weight and height
# recode df_master into df_regression for easy editing in modelling
df_regression <- df_master %>%
mutate(amount = log(amount))
df_regression <- df_regression[, -c(1,2,3,30,31)] # remove patient id, date of admission, discharge, weight and height
df_regression <- rename(df_regression,
'log_amount' = 'amount',
'mh1' = 'medical_history_1',
'mh2' = 'medical_history_2',
'mh3' = 'medical_history_3',
'mh4' = 'medical_history_4',
'mh5' = 'medical_history_5',
'mh6' = 'medical_history_6',
'mh7' = 'medical_history_7',
'pom1' = 'preop_medication_1',
'pom2' = 'preop_medication_2',
'pom3' = 'preop_medication_3',
'pom4' = 'preop_medication_4',
'pom5' = 'preop_medication_5',
'pom6' = 'preop_medication_6',
'sm1' = 'symptom_1',
'sm2' = 'symptom_2',
'sm3' = 'symptom_3',
'sm4' = 'symptom_4',
'sm5' = 'symptom_5')
df_regression_naomit <- df_master_naomit %>%
mutate(amount = log(amount))
df_regression_naomit <- df_regression_naomit[, -c(1,2,3,30,31)] # remove patient id, date of admission, discharge, weight and height
df_regression <- rename(df_regression,
'log_amount' = 'amount',
'mh1' = 'medical_history_1',
'mh2' = 'medical_history_2',
'mh3' = 'medical_history_3',
'mh4' = 'medical_history_4',
'mh5' = 'medical_history_5',
'mh6' = 'medical_history_6',
'mh7' = 'medical_history_7',
'pom1' = 'preop_medication_1',
'pom2' = 'preop_medication_2',
'pom3' = 'preop_medication_3',
'pom4' = 'preop_medication_4',
'pom5' = 'preop_medication_5',
'pom6' = 'preop_medication_6',
'sm1' = 'symptom_1',
'sm2' = 'symptom_2',
'sm3' = 'symptom_3',
'sm4' = 'symptom_4',
'sm5' = 'symptom_5')
df_regression_naomit <- df_master_naomit %>%
mutate(amount = log(amount))
df_regression_naomit <- df_regression_naomit[, -c(1,2,3,30,31)] # remove patient id, date of admission, discharge, weight and height
df_regression <- rename(df_regression,
'log_amount' = 'amount',
'mh1' = 'medical_history_1',
'mh2' = 'medical_history_2',
'mh3' = 'medical_history_3',
'mh4' = 'medical_history_4',
'mh5' = 'medical_history_5',
'mh6' = 'medical_history_6',
'mh7' = 'medical_history_7',
'pom1' = 'preop_medication_1',
'pom2' = 'preop_medication_2',
'pom3' = 'preop_medication_3',
'pom4' = 'preop_medication_4',
'pom5' = 'preop_medication_5',
'pom6' = 'preop_medication_6',
'sm1' = 'symptom_1',
'sm2' = 'symptom_2',
'sm3' = 'symptom_3',
'sm4' = 'symptom_4',
'sm5' = 'symptom_5')
View(df_regression_naomit)
df_regression_naomit <- rename(df_regression_naomit,
'log_amount' = 'amount',
'mh1' = 'medical_history_1',
'mh2' = 'medical_history_2',
'mh3' = 'medical_history_3',
'mh4' = 'medical_history_4',
'mh5' = 'medical_history_5',
'mh6' = 'medical_history_6',
'mh7' = 'medical_history_7',
'pom1' = 'preop_medication_1',
'pom2' = 'preop_medication_2',
'pom3' = 'preop_medication_3',
'pom4' = 'preop_medication_4',
'pom5' = 'preop_medication_5',
'pom6' = 'preop_medication_6',
'sm1' = 'symptom_1',
'sm2' = 'symptom_2',
'sm3' = 'symptom_3',
'sm4' = 'symptom_4',
'sm5' = 'symptom_5')
m_allsub_naomit <-regsubsets(log_amount ~ ., data = df_regression_naomit,
nbest=1, nvmax=33)
model_summary_naomit <- summary(m_allsub_naomit)
result_naomit <- cbind(model_summary_naomit$which, round(cbind(rsq=model_summary_naomit$rsq,
adjr2=model_summary_naomit$adjr2,
cp=model_summary_naomit$cp,
bic=model_summary_naomit$bic,
rss=model_summary_naomit$rss), 3))
par(mfrow = c(2,2))
plot(model_summary_naomit$bic)
plot(model_summary_naomit$cp)
plot(model_summary_naomit$adjr2)
plot(model_summary_naomit$rss)
par(mfrow = c(1,1))
m_allsub_naomit
result_naomit
par(mfrow = c(2,2))
plot(model_summary$bic)
plot(model_summary$cp)
plot(model_summary$adjr2)
plot(model_summary$rss)
par(mfrow = c(1,1))
plot(model_summary$bic)
plot(model_summary$cp)
plot(model_summary$adjr2)
plot(model_summary$rss)
plot(model_summary_naomit$bic)
plot(model_summary_naomit$cp)
plot(model_summary_naomit$adjr2)
plot(model_summary_naomit$rss)
m_allsub
summary(m_allsub)
result
m_allsub
lm(log_amount ~ sm1, sm2, sm3, sm4, sm5, mh1, mh6, age, bmi, gender, race,
resident_status, data = df_regression)
View(df_regression)
lm(log_amount ~ sm1+sm2+sm3+sm4+sm5+mh1+mh6+age+bmi+gender+race+resident_status,
data = df_regression)
a(1)
a[1,]
a = c(3, 6, 9, 14)
b = c(2, 4, 5, 8, 21)
a[1]
length(a)
c = vector(mode = "list", length = length(a) + length(b))
c
for i in (1:4)
{
m = i+1
if (a[i] < b[i]){
c[i] = a[i];
c[m] = b[i]
}
else {
c[i] = b[i];
c[m] = a[i]
}
}
i = seq (1, 4, 1)
for i in (1:4)
{
m = i+1
if (a[i] < b[i]){
c[i] = a[i];
c[m] = b[i]
}
else {
c[i] = b[i];
c[m] = a[i]
}
}
remove(i)
for (i in 1:4)
{
m = i+1
if (a[i] < b[i]){
c[i] = a[i];
c[m] = b[i]
}
else {
c[i] = b[i];
c[m] = a[i]
}
}
c
remove(c)
c = vector(length = length(a) + length(b))
c
for (i in 1:4)
{
m = i+1
if (a[i] < b[i]){
c[i] = a[i];
c[m] = b[i]
}
else {
c[i] = b[i];
c[m] = a[i]
}
}
c
for (i in 1:4)
{
m = i+1
if (a[i] < b[i]){
c[2*i-1] = a[i];
c[2*i] = b[i]
}
else {
c[2*i-1] = b[i];
c[2*i] = a[i]
}
}
c
remove(i)
m = 1
for (i in 1:4){
if (a[i] < b[m]{
c[2*i-1]= a[i];
c[2*i]= b[m];
m = i
}
else {
c[2*i-1]=b[m];
c[2*i]= a[i];
m= i+1
}
}
for (i in 1:4)
{
if (a[i] < b[m]){
c[2*i-1]= a[i];
c[2*i]= b[m];
m = i
}
else {
c[2*i-1]=b[m];
c[2*i]= a[i];
m= i+1
}
}
c
i
m
m = 1
for (i in 1:5)
{
if (a[i] < b[m]){
c[2*i-1]= a[i];
c[2*i]= b[m];
m = i
}
else {
c[2*i-1]=b[m];
c[2*i]= a[i];
m= i+1
}
}
m = 1
for (i in 1:4)
{
if (a[i] < b[m]){
c[2*i-1]= a[i];
c[2*i]= b[m];
m = i
}
else {
c[2*i-1]=b[m];
c[2*i]= a[i];
m= i+1
}
}
c
